using MAC_use_cases.Model.UseCases;
using MAC_use_cases.ViewModel;
using Newtonsoft.Json;
using Siemens.Automation.ModularApplicationCreator.Modules;
using Siemens.Automation.ModularApplicationCreator.Serializer;
using Siemens.Automation.ModularApplicationCreator.Tia;
using Siemens.Automation.ModularApplicationCreator.Tia.Helper;
using Siemens.Automation.ModularApplicationCreator.Tia.Helper.Create_XML_Block;
using Siemens.Automation.ModularApplicationCreator.Tia.Modules;
using Siemens.Automation.ModularApplicationCreator.Tia.Openness;
using Siemens.Automation.ModularApplicationCreator.Tia.Openness.SoftwareUnit;
using Siemens.Automation.ModularApplicationCreator.Tia.TiaAttributeFuncs;
using Siemens.Automation.ModularApplicationCreatorBasics.Logging;

namespace MAC_use_cases.Model
{
    /// <summary>
    ///     This is the main class in which the workflow starts. Here are all sections for creating or generating the TIA
    ///     Portal Project
    /// </summary>
    public class MAC_use_casesEM : BaseMAC_use_casesEM
    {
        /// <summary>
        ///     This attribute is the instance of the plcDevice
        /// </summary>
        private PlcDevice _plcDevice;

        private ISoftwareUnit _softwareUnit;

        // <auto-generated>
        //     This code was generated by a tool. Do not remove or modify the syntax of it.
        //     This constructor is used at first creation of this object.
        // </auto-generated>
        public MAC_use_casesEM()
        {
            // This Function can be modified to accommodate the Control Modules used in this Equipment Module
            CreateControlModules();
            // Add any code here which is needed to be used only when this object is created the first time.

            InitAfterFirstCreationOrDeserialization();

            MyTo = new TechnologyObjectClass(this);
        }

        // <auto-generated>
        //     This code was generated by a tool. Do not remove or modify the syntax of it.
        //     This constructor is used only for deserialization.
        // </auto-generated>
        [JsonConstructor]
        public MAC_use_casesEM(JsonConstructorMarker nullObj)
        {
            // Add any code here which is only necessary when this object is deserialized.

            InitAfterFirstCreationOrDeserialization();

            MyTo = new TechnologyObjectClass(this);
        }

        //-------------------------------------------
        // This ModuleStart property is generated.
        // It must be at the top of the class. It is used during module update.
        //
        // CAUTION: Do not use public instance variables as they overtake the properties in serialization.
        //-------------------------------------------
        public ModuleEdge ModuleStart
        {
            get => TopLevelEM ? new ModuleEdge() : null;
            set { }
        }

        public HardwareGenerationExcelBasedViewModel HardwareGenerationExcelBasedViewModel { get; set; } = new HardwareGenerationExcelBasedViewModel();

        /// <summary>
        ///     This attribute is the instance of the TechnologyObjectClass
        /// </summary>
        public TechnologyObjectClass MyTo { get; set; }

        public bool IsGenerateHardwareChecked { get; set; } = false;

        /// <summary>
        ///     This attribute is the instance for the serialization
        /// </summary>
        public NonTIAProjectBased NonTiaProjectBased { get; set; } = new NonTIAProjectBased("myModel");

        /// <summary>
        ///     This attribute is the string which is used for the renaming of the FB.
        ///     This string can be changed in the View
        /// </summary>
        public string NameOfMyFb { get; set; } = "MyFunctionBlock";

        /// <summary>
        ///     This attribute is the string which is used for the renaming of the safety-FB.
        ///     This string can be changed in the View
        /// </summary>
        public string NameOfMyFailSafeFb { get; set; } = "MyFunctionBlock_FailSafe";

        [JsonIgnore]
        public string NameAndType
        {
            get => NamingConventions.CreateModuleNameAndTypeForEM("MAC_use_cases", this);
        }

        public override bool GenerateTiaPortal(TiaTemplateContext tiaTemplateContext, string generationPhaseName)
        {
            switch (generationPhaseName)
            {
                case TiaGenerationPhases.Init:
                    _plcDevice = GetPlcDevice(tiaTemplateContext);
                    break;

                // Add equipment module specific code for each generation phase here, which is
                // necessary before the ResourceManagement is called.
            }

            ResourceManagement.Generate(tiaTemplateContext, this, generationPhaseName);

            foreach (var module in ControlModules)
            {
                if (module is ITiaGenerateable tiaGen)
                {
                    tiaGen.GenerateTiaPortal(tiaTemplateContext, generationPhaseName);
                }
            }

            var opennessTiaPortalProject = GeneralSupport.GetOpennessProject(tiaTemplateContext.TiaProject);

            switch (generationPhaseName)
            {
                case TiaGenerationPhases.Init:

                    //if (!string.IsNullOrWhiteSpace(HardwareGenerationExcelBasedViewModel.ImportSource))
                    //{
                    //    HardwareGenerationExcelBased.CreateNewDevicesFromExcelSheet(this, opennessTiaPortalProject,
                    //        HardwareGenerationExcelBasedViewModel.ImportSource);
                    //}

                    //if (!IsGenerateHardwareChecked)
                    //{
                    //    break;
                    //}

                    //Hardware config has to be in the Init phase.Otherwise, it can't be used in the MAC.
                    var s120 = HardwareGeneration.GenerateS120(this, "S120MACTest", "S120DeviceTest",
                        "this drive is generated with MAC");

                    var s210 = HardwareGeneration.GenerateS210(this, "S210MACTest", "S210DeviceTest",
                        "this drive is generated with MAC");
                    //var subnet1 = HardwareGeneration.GetOrCreateSubnet(SubnetsManager, "PN/IE_1");

                    //HardwareGeneration.ConnectDriveToSubnet(s120, subnet1, this);
                    //HardwareGeneration.ConnectDriveToSubnet(s210, subnet1, this);

                    break;
                case TiaGenerationPhases.Build:

                    // Add equipment module specific code generation here.
                    var opennessCpu = GeneralSupport.GetOpennessDeviceItem(tiaTemplateContext.TiaDevice);
                    _softwareUnit = SoftwareUnits.GetOrCreateSoftwareUnit(_plcDevice, "MyUnit", this, "Namesapce_example");

                    // Configure a Technology Object
                    MyTo.ConfigureTO(MyTo.TechnologicalObject, this);
                    // Log messages
                    GeneralSupport.LogMessage(LogTypes.GenerationInfo, "Generate technology objects", this);
                    // Create Technology Object
                    TechnologyObjectClass.CreateTOs(_plcDevice, this);

                    IntegrateLibraries.CreateInstanceDB_via_XmlInstDB(this, ResourceManagement.MyFunctionBlock,
                        "CreatedDbFromMasterCopy_XmlInstDB", ResourceManagement.ModuleBlocksRootGroup, _plcDevice);

                    var myDataBlockGlobal =
                        GenericBlockCreation.GenerateGlobalDataBlock("MyDataBlock_Global", _plcDevice, this);

                    GenericBlockCreation.SetDefaultValue(myDataBlockGlobal.Name, "myParameterName", TIATYPE.INT, "99",
                        this);

                    GenericBlockCreation.GenerateMultiInstanceFB(_plcDevice,
                        tiaTemplateContext.TiaProject.GetEditingLanguage(), this);

                    var dbFromMasterCopy = IntegrateLibraries.CreateInstanceDataBlock(this,
                        ResourceManagement.MyFunctionBlock,
                        $"{nameof(ResourceManagement.MyFunctionBlock)}Db", ResourceManagement.ModuleBlocksRootGroup);

                    GenericBlockCreation.GenerateOB_Main(dbFromMasterCopy.Name, this,
                        tiaTemplateContext.TiaProject.GetEditingLanguage(), _plcDevice);

                    GenericBlockCreation.GenerateOBWithMultipleCalls("myOB", 10,
                        tiaTemplateContext.TiaProject.GetEditingLanguage(), _plcDevice, this);

                    GenericBlockCreation.CreateFunctionBlock($"{NameOfMyFb}_FBD", dbFromMasterCopy.Name,
                        ProgrammingLanguage.FBD,
                        _plcDevice);
                    GenericBlockCreation.CreateFunctionBlock($"{NameOfMyFb}_LAD", dbFromMasterCopy.Name,
                        ProgrammingLanguage.LAD,
                        _plcDevice);
                    GenericBlockCreation.CreateFunctionBlock($"{NameOfMyFb}_SCL", dbFromMasterCopy.Name,
                        ProgrammingLanguage.SCL,
                        _plcDevice);

                    var dbFromFailSafeFbMasterCopy = IntegrateLibraries.CreateInstanceDataBlock(this,
                        ResourceManagement.MyFunctionBlock_FailSafe,
                        $"{nameof(ResourceManagement.MyFunctionBlock_FailSafe)}Db",
                        ResourceManagement.ModuleBlocksRootGroup);

                    GenericBlockCreation.CreateFailSafeFunctionBlock($"{NameOfMyFailSafeFb}_F_LAD",
                        dbFromFailSafeFbMasterCopy.Name,
                        ProgrammingLanguage.F_LAD,
                        _plcDevice);
                    GenericBlockCreation.CreateFunctionBlockInSoftwareUnit(_softwareUnit, "MyFb_FBD",
                        ProgrammingLanguage.FBD, _plcDevice);
                    GenericBlockCreation.CreateFunctionBlockInSoftwareUnit(_softwareUnit, "MyFb_LAD",
                        ProgrammingLanguage.LAD, _plcDevice);
                    GenericBlockCreation.CreateFunctionBlockInSoftwareUnit(_softwareUnit, "MyFb_SCL", ProgrammingLanguage.SCL, _plcDevice);

                    var dbFromTypedMasterCopy = IntegrateLibraries.CreateInstanceDataBlock(this,
                        ResourceManagement.MyFunctionBlock_Typed,
                        $"{nameof(ResourceManagement.MyFunctionBlock_Typed)}Db", ResourceManagement.ModuleBlocksRootGroup);

                    GenericBlockCreation.CreateFunctionBlock($"{nameof(ResourceManagement.MyFunctionBlock_Typed)}_FBD",
                        dbFromTypedMasterCopy.Name,
                        ProgrammingLanguage.FBD,
                        _plcDevice);

                    var myTagTable = CreateVariables.CreateTagTable(_plcDevice, "myTagTable");
                    var mySoftwareUnitTagTable = CreateVariables.CreateTagTable(_softwareUnit, "mySoftwareUnitTagTable");

                    CreateVariables.CreateTagInTagTable(myTagTable, "%I", "187", "0", "myTag_0", "Bool", "myTagComment");
                    CreateVariables.CreateTagInTagTable(mySoftwareUnitTagTable, "%I", "188", "0", "myTag_1", "Bool",
                        "myTagComment");

                    if (IsGenerateHardwareChecked)
                    {
                        var hmiSoftware = HardwareGeneration.GetOrCreateHMISoftware(opennessTiaPortalProject, "HMI_1");
                        IntegrateLibraries.GenerateScreenFromMastercopy(hmiSoftware,
                            ResourceManagement.Lib_MAC_use_cases.Lib_Screen_1);
                    }

                    provider.CollectAttributes(Attributes);
                    provider.WriteValues(_plcDevice);
                    break;
            }

            return true;
        }
    }
}
