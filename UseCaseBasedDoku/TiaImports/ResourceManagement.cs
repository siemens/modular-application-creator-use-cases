//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using Siemens.Automation.ModularApplicationCreator.Tia;
using Siemens.Automation.ModularApplicationCreator.Tia.Openness;
using Siemens.Automation.ModularApplicationCreator.Core;
using Siemens.Automation.ModularApplicationCreatorBasics.Logging;
using Siemens.Automation.ModularApplicationCreator.Tia.Helper.GenerationMapping;
using Siemens.Automation.ModularApplicationCreator.Modules;
using Siemens.Automation.ModularApplicationCreator.Tia.Helper;
using Siemens.Automation.ModularApplicationCreator.Tia.Enums;
using UseCaseBasedDoku.Model;

namespace UseCaseBasedDoku.TiaImports
{
    public class ResourceManagement
    {
        private List<TiaLibraryInfo> m_libraryInfos;
        private List<LibraryBase> m_libraries;
        private Dictionary<NameAndType, LibraryTypeObject> m_nameAndType2LibraryTypeObject = new Dictionary<NameAndType, LibraryTypeObject>();
        private List<TagGroup> m_duplicatedRootTagGroups = new List<TagGroup>();
        private List<TypeGroup> m_duplicatedRootTypeGroups = new List<TypeGroup>();
        private List<BlockGroup> m_duplicatedRootBlockGroups = new List<BlockGroup>();
        private List<WatchTableGroup> m_duplicatedRootWatchTableGroups = new List<WatchTableGroup>();
        // List of generated blocks
        public Dictionary<object, object> __created_block_list = new Dictionary<object, object>();
        public UseCaseBasedDokuLibrary UseCaseBasedDokuLibrary { get; set; }
        public UseCaseBasedDokuFB UseCaseBasedDokuFB { get { return UseCaseBasedDokuLibrary.UseCaseBasedDokuFB as UseCaseBasedDokuFB; } }
        public List<string> LibraryTagsRootGroupPath { get; set; } = new List<string>();

        public TagGroup LibraryTagsRootGroup { get; private set; }

        public List<string> LibraryTypesRootGroupPath { get; set; } = new List<string>();

        public TypeGroup LibraryTypesRootGroup { get; private set; }

        public List<string> LibraryBlocksRootGroupPath { get; set; } = new List<string>();

        public BlockGroup LibraryBlocksRootGroup { get; private set; }

        public List<string> LibraryWatchTablesRootGroupPath { get; set; } = new List<string>();

        public WatchTableGroup LibraryWatchTablesRootGroup { get; private set; }

        public List<string> ModuleTagsRootGroupPath { get; set; } = new List<string>();

        public TagGroup ModuleTagsRootGroup { get; private set; }

        public List<string> ModuleTypesRootGroupPath { get; set; } = new List<string>();

        public TypeGroup ModuleTypesRootGroup { get; private set; }

        public List<string> ModuleBlocksRootGroupPath { get; set; } = new List<string>();

        public BlockGroup ModuleBlocksRootGroup { get; private set; }

        public List<string> ModuleWatchTablesRootGroupPath { get; set; } = new List<string>();

        public WatchTableGroup ModuleWatchTablesRootGroup { get; private set; }

        public void Generate(TiaTemplateContext tiaTemplateContext, UseCaseBasedDokuEM module, string generationPhaseName)
        {
            if (generationPhaseName == TiaGenerationPhases.CleanUp)
            {
                CollectGroupNames(tiaTemplateContext, module);
            }
            else if (generationPhaseName == TiaGenerationPhases.Init)
            {
                Init(tiaTemplateContext, module);
                DeleteExistingInstanceGroups(tiaTemplateContext.TiaDevice as PlcDevice, module);
            }
            else if (generationPhaseName == TiaGenerationPhases.PostInit)
            {
                PostInit(tiaTemplateContext, module);
            }
            else if (generationPhaseName == TiaGenerationPhases.Build)
            {
                AddResourcesToTiaProject(tiaTemplateContext, module);
                CorrectTheWrapperClasses(tiaTemplateContext);
            }
            else if (generationPhaseName == TiaGenerationPhases.Refine)
            {
                PostGeneration(tiaTemplateContext, module);
            }
            else if (generationPhaseName == TiaGenerationPhases.Complete)
            {
                FinishGeneration(tiaTemplateContext, module);
            }
        }

        /// <summary>
        /// Creates an instance DB based on the FB created by Master copy.
        /// </summary>
        /// <param name="functionBlock">Maser copy of the FB.</param>
        /// <param name="instanceName"> Name of the instance DB.</param>
        /// <param name="targetFolder">Target folder. If left empty then it will be created in root folder of the program blocks.</param>
        /// <returns>New instance DB.</returns>
        public DataBlock CreateInstanceDb(FBMasterCopy functionBlock, string instanceName, TargetDictionary<ProgramBlock> targetFolder = null)
        {
            return DoCreateInstanceDb(functionBlock, instanceName, targetFolder);
        }

        /// <summary>
        /// Creates an instance DB based on the FB created by Master copy.
        /// The expected name of the instance DB is extended. "Inst_[moduleName]_instanceName"
        /// </summary>
        /// <param name="functionBlock">Maser copy of the FB.</param>
        /// <param name="instanceName">Name of the instance DB.</param>
        /// <param name="module">The module which requested the creation of the instance DB.</param>
        /// <param name="targetFolder">Target folder. If left empty then it will be created in root folder of the program blocks.</param>
        /// <returns>New instance DB.</returns>
        public DataBlock CreateInstanceDbWithStandardizedName(FBMasterCopy functionBlock, string instanceName, Module module, TargetDictionary<ProgramBlock> targetFolder = null)
        {
            if (string.IsNullOrEmpty(instanceName))
            {
                throw new ArgumentNullException("CreateInstanceDbWithStandardizedName can not be called with empty or null instanceName!");
            }

            return CreateInstanceDb(functionBlock, NamingConventions.CreateInstanceDbName(instanceName, module), targetFolder);
        }

        /// <summary>
        /// Creates an instance DB based on the FB created by Library type.
        /// </summary>
        /// <param name="functionBlock">Library type of the FB.</param>
        /// <param name="instanceName"> Name of the instance DB.</param>
        /// <param name="targetFolder">Target folder. If left empty then it will be created in root folder of the program blocks.</param>
        /// <returns>New instance DB.</returns>
        public DataBlock CreateInstanceDb(LibraryTypeObject functionBlock, string instanceName, TargetDictionary<ProgramBlock> targetFolder = null)
        {
            return DoCreateInstanceDb(functionBlock, instanceName, targetFolder);
        }

        /// <summary>
        /// Creates an instance DB based on the FB created by Library type.
        /// The expected name of the instance DB is extended. "Inst_[moduleName]_instanceName".
        /// </summary>
        /// <param name="functionBlock">Library type of the FB.</param>
        /// <param name="instanceName"> Name of the instance DB.</param>
        /// <param name="targetFolder">Target folder. If left empty then it will be created in root folder of the program blocks.</param>
        /// <returns>New instance DB.</returns>
        public DataBlock CreateInstanceDbWithStandardizedName(LibraryTypeObject functionBlock, string instanceName, Module module, TargetDictionary<ProgramBlock> targetFolder = null)
        {
            if (string.IsNullOrEmpty(instanceName))
            {
                throw new ArgumentNullException("CreateInstanceDbWithStandardizedName can not be called with empty or null instanceName!");
            }

            return CreateInstanceDb(functionBlock, NamingConventions.CreateInstanceDbName(instanceName, module), targetFolder);
        }

        public List<TiaLibraryInfo> GetLibraryInfos()
        {
            if (m_libraryInfos != null)
            {
                return m_libraryInfos;
            }

            m_libraryInfos = new List<TiaLibraryInfo>();

            LibraryBase lib = new UseCaseBasedDokuLibrary(false);
            var libInfo = new TiaLibraryInfo("UseCaseBasedDokuLibrary", lib.Version);
            m_libraryInfos.Add(libInfo);

            return m_libraryInfos;
        }

        public List<LibraryBase> GetLibraries()
        {

            m_libraries = new List<LibraryBase>();

            m_libraries.Add(UseCaseBasedDokuLibrary);

            return m_libraries;
        }

        private void DeleteExistingInstanceGroups(PlcDevice targetDevice, UseCaseBasedDokuEM module)
        {
            TagGroup _ModuleTagsRootGroup = FindRootGroup(ModuleTagsRootGroupPath, targetDevice.Tags.Groups) as TagGroup;
            if (_ModuleTagsRootGroup != null)
            {
                _ModuleTagsRootGroup.DeleteGroupItself();
                _ModuleTagsRootGroup = null;
            }

            TypeGroup _ModuleTypesRootGroup = FindRootGroup(ModuleTypesRootGroupPath, targetDevice.Types.Groups) as TypeGroup;
            if (_ModuleTypesRootGroup != null)
            {
                _ModuleTypesRootGroup.DeleteGroupItself();
                _ModuleTypesRootGroup = null;
            }

            BlockGroup _ModuleBlocksRootGroup = FindRootGroup(ModuleBlocksRootGroupPath, targetDevice.Blocks.Groups) as BlockGroup;
            if (_ModuleBlocksRootGroup != null)
            {
                _ModuleBlocksRootGroup.DeleteGroupItself();
                _ModuleBlocksRootGroup = null;
            }

            WatchTableGroup _ModuleWatchTablesRootGroup = FindRootGroup(ModuleWatchTablesRootGroupPath, targetDevice.WatchTables.Groups) as WatchTableGroup;
            if (_ModuleWatchTablesRootGroup != null)
            {
                _ModuleWatchTablesRootGroup.DeleteGroupItself();
                _ModuleWatchTablesRootGroup = null;
            }
        }

        private void CollectGroupNames(TiaTemplateContext tiaTemplateContext, UseCaseBasedDokuEM module)
        {
            EquipmentModuleHierarchyBuilder hierarchyBuilder = tiaTemplateContext.EquipmentModuleHierarchyBuilder;

            hierarchyBuilder.RegisterRootGroupName(module, module.NameAndType, TiaGroupTypes.TAGS, tiaTemplateContext);
            hierarchyBuilder.RegisterRootGroupName(module, module.NameAndType, TiaGroupTypes.PLC_DATA_TYPES, tiaTemplateContext);
            hierarchyBuilder.RegisterRootGroupName(module, module.NameAndType, TiaGroupTypes.PROGRAM_BLOCKS, tiaTemplateContext);
            hierarchyBuilder.RegisterRootGroupName(module, module.NameAndType, TiaGroupTypes.WATCH_TABLES, tiaTemplateContext);
        }

        private DataBlock DoCreateInstanceDb(object libraryFunctionBlock, string instanceName, TargetDictionary<ProgramBlock> targetFolder)
        {
            if (libraryFunctionBlock == null || string.IsNullOrEmpty(instanceName))
            {
                throw new ArgumentNullException("DoCreateInstanceDb can not be called with null as functionBlock or instanceName!");
            }

            if (!__created_block_list.TryGetValue(libraryFunctionBlock, out object obj))
            {
                throw new NotSupportedException($"Cannot create instance DB because no object was mapped with {libraryFunctionBlock}.");
            }

            FunctionBlock fb = obj as FunctionBlock;

            if (targetFolder == null)
            {
                targetFolder = ModuleBlocksRootGroup.Blocks;
            }

            if (obj is FunctionBlock functionBlock)
            {
                return functionBlock.CreateInstanceDB(instanceName, targetFolder);
            }

            throw new NotSupportedException($"Cannot create instance DB for {obj.GetType().Name}.");
        }

        private void Init(TiaTemplateContext tiaTemplateContext, UseCaseBasedDokuEM module)
        {
            PlcDevice targetDevice = tiaTemplateContext.TiaProject.Devices[module.ParentDevice.Name] as PlcDevice;

            __created_block_list.Clear();

            LibraryTagsRootGroupPath.Clear();
            LibraryTagsRootGroupPath.AddRange(targetDevice.Tags.DefaultLibraryGroup.PathAsList);
            LibraryTagsRootGroup = null;

            LibraryTypesRootGroupPath.Clear();
            LibraryTypesRootGroupPath.AddRange(targetDevice.Types.DefaultLibraryGroup.PathAsList);
            LibraryTypesRootGroup = null;

            LibraryBlocksRootGroupPath.Clear();
            LibraryBlocksRootGroupPath.AddRange(targetDevice.Blocks.DefaultLibraryGroup.PathAsList);
            LibraryBlocksRootGroup = null;

            LibraryWatchTablesRootGroupPath.Clear();
            LibraryWatchTablesRootGroupPath.AddRange(targetDevice.WatchTables.DefaultLibraryGroup.PathAsList);
            LibraryWatchTablesRootGroup = null;

            ModuleTagsRootGroupPath = tiaTemplateContext.EquipmentModuleHierarchyBuilder.CalculateAbsoluteRootPath(module, TiaGroupTypes.TAGS);
            ModuleTagsRootGroup = null;

            ModuleTypesRootGroupPath = tiaTemplateContext.EquipmentModuleHierarchyBuilder.CalculateAbsoluteRootPath(module, TiaGroupTypes.PLC_DATA_TYPES);
            ModuleTypesRootGroup = null;

            ModuleBlocksRootGroupPath = tiaTemplateContext.EquipmentModuleHierarchyBuilder.CalculateAbsoluteRootPath(module, TiaGroupTypes.PROGRAM_BLOCKS);
            ModuleBlocksRootGroup = null;

            ModuleWatchTablesRootGroupPath = tiaTemplateContext.EquipmentModuleHierarchyBuilder.CalculateAbsoluteRootPath(module, TiaGroupTypes.WATCH_TABLES);
            ModuleWatchTablesRootGroup = null;

            UseCaseBasedDokuLibrary = new UseCaseBasedDokuLibrary();
            UseCaseBasedDokuLibrary.InstallLibrary();
            UseCaseBasedDokuLibrary.Open();
        }

        private void PostInit(TiaTemplateContext tiaTemplateContext, UseCaseBasedDokuEM module)
        {
            UseCaseBasedDokuFB.ParentDevice = null;
        }

        private void AddResourcesToTiaProject(TiaTemplateContext tiaTemplateContext, UseCaseBasedDokuEM module)
        {
            m_nameAndType2LibraryTypeObject.Clear();

            PlcDevice targetDevice = tiaTemplateContext.TiaProject.Devices[module.ParentDevice.Name] as PlcDevice;
            ILoggingService logging = (MacManagement.ServiceProvider.GetService(typeof(ILoggingService)) as ILoggingService);

            // Create user groups
            LibraryTagsRootGroup = GenerateGroupHierarchy(LibraryTagsRootGroupPath, targetDevice.Tags.Groups) as TagGroup;
            LibraryTypesRootGroup = GenerateGroupHierarchy(LibraryTypesRootGroupPath, targetDevice.Types.Groups) as TypeGroup;
            LibraryBlocksRootGroup = GenerateGroupHierarchy(LibraryBlocksRootGroupPath, targetDevice.Blocks.Groups) as BlockGroup;
            LibraryWatchTablesRootGroup = GenerateGroupHierarchy(LibraryWatchTablesRootGroupPath, targetDevice.WatchTables.Groups) as WatchTableGroup;
            ModuleTagsRootGroup = GenerateGroupHierarchy(ModuleTagsRootGroupPath, targetDevice.Tags.Groups) as TagGroup;
            ModuleTypesRootGroup = GenerateGroupHierarchy(ModuleTypesRootGroupPath, targetDevice.Types.Groups) as TypeGroup;
            ModuleBlocksRootGroup = GenerateGroupHierarchy(ModuleBlocksRootGroupPath, targetDevice.Blocks.Groups) as BlockGroup;
            ModuleWatchTablesRootGroup = GenerateGroupHierarchy(ModuleWatchTablesRootGroupPath, targetDevice.WatchTables.Groups) as WatchTableGroup;
            LibraryTagsRootGroup.AddGroup("UseCaseBasedDokuLibrary_Tags");
            LibraryTypesRootGroup.AddGroup("UseCaseBasedDokuLibrary_Types");
            LibraryBlocksRootGroup.AddGroup("UseCaseBasedDokuLibrary_Blocks");
            LibraryWatchTablesRootGroup.AddGroup("UseCaseBasedDokuLibrary_WatchTables");


            // Populate library types with ModuleBlocksRootGroup for InstanceDB creation
            AddRootGroupToLibraryTypes();

            // Create tag lists

            // Create types

            // Create technological objects


            // Create blocks
            if (UseCaseBasedDokuFB.IsIncludedInTiaProject)
            {
                if (UseCaseBasedDokuFB.ParentDevice == null)
                    UseCaseBasedDokuFB.ParentDevice = targetDevice;

                UseCaseBasedDokuLibrary.UseCaseBasedDokuFB.CreateOnlyOnce = false;
                __created_block_list[UseCaseBasedDokuFB] = LibraryBlocksRootGroup["UseCaseBasedDokuLibrary_Blocks"].Blocks.Add(UseCaseBasedDokuFB);
                CollectLibraryTypeCreationInfo(UseCaseBasedDokuFB);
            }

        }

        private void PostGeneration(TiaTemplateContext tiaTemplateContext, UseCaseBasedDokuEM module)
        {
            PlcDevice targetDevice = tiaTemplateContext.TiaProject.Devices[module.ParentDevice.Name] as PlcDevice;
            UseCaseBasedDokuLibrary.Update(targetDevice);
        }

        private void FinishGeneration(TiaTemplateContext tiaTemplateContext, UseCaseBasedDokuEM module)
        {
            foreach (var group in m_duplicatedRootBlockGroups)
            {
                tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(group);
            }

            foreach (var group in m_duplicatedRootTagGroups)
            {
                tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(group);
            }

            foreach (var group in m_duplicatedRootTypeGroups)
            {
                tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(group);
            }

            foreach (var group in m_duplicatedRootWatchTableGroups)
            {
                tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(group);
            }

            tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(ModuleTagsRootGroup);
            tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(ModuleTypesRootGroup);
            tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(ModuleBlocksRootGroup);
            tiaTemplateContext.EquipmentModuleHierarchyBuilder.RemoveEmptyGroups(ModuleWatchTablesRootGroup);
            UseCaseBasedDokuLibrary.Close();
            UseCaseBasedDokuLibrary.Dispose();
        }

        private IGroup GenerateGroupHierarchy(List<string> groupPath, IGroupCollection parent)
        {
            IGroupCollection currentGroup = parent;
            foreach (string group in groupPath)
            {
                currentGroup = currentGroup.AddGroup(group) as IGroupCollection;
            }
            return currentGroup as IGroup;
        }

        private IGroupCollection FindRootGroup(List<string> groupPath, IGroupCollection parent)
        {
            IGroupCollection currentGroup = parent;
            foreach (string group in groupPath)
            {
                currentGroup = currentGroup.TryGetGroup(group);
                if (currentGroup == null)
                {
                    break;
                }
            }
            return currentGroup;
        }

        private void CollectLibraryTypeCreationInfo(object obj)
        {
            if (obj is LibraryTypeObject libTypeObject)
            {
                var opennessWrapper = __created_block_list[libTypeObject];

                if (opennessWrapper is ControllerType udt)
                {
                    m_nameAndType2LibraryTypeObject[new NameAndType(udt.Name, typeof(ControllerType))] = libTypeObject;
                }
                else if (opennessWrapper is ProgramBlock block)
                {
                    m_nameAndType2LibraryTypeObject[new NameAndType(block.Name, typeof(ProgramBlock))] = libTypeObject;
                }
                else
                {
                    throw new NotImplementedException($"{nameof(ResourceManagement)} can handle only block and UDT but it was {opennessWrapper}.");
                }
            }
        }

        private void CorrectTheWrapperClasses(TiaTemplateContext tiaTemplateContext)
        {
            PlcDevice plcDevice = tiaTemplateContext.TiaDevice as PlcDevice;
            ProgramFolder programFolder = plcDevice.Blocks;
            TypeFolder typeFolder = plcDevice.Types;

            foreach (NameAndType name in m_nameAndType2LibraryTypeObject.Keys)
            {
                LibraryTypeObject typeObject = m_nameAndType2LibraryTypeObject[name];
                if (name.Type == typeof(ControllerType))
                {
                    ControllerType udt = typeFolder[name.Name];
                    __created_block_list[typeObject] = udt;
                }
                else if (name.Type == typeof(ProgramBlock))
                {
                    ProgramBlock block = programFolder[name.Name];
                    __created_block_list[typeObject] = block;
                }
            }
        }

        private void AddRootGroupToLibraryTypes()
        {
            foreach (LibraryBase library in GetLibraries())
            {
                foreach (LibraryTypeObject libraryTypeObject in library.Types.Values)
                {
                    if (libraryTypeObject is ICanCreateInstanceDB canCreateInstanceDbType)
                    {
                        canCreateInstanceDbType.InstanceDbTargetFolder = ModuleBlocksRootGroup.Blocks;
                    }
                }
            }
        }

        private class NameAndType
        {
            public string Name { get; }
            public Type Type { get; }

            public NameAndType(string name, Type type)
            {
                Name = name;
                Type = type;
            }
        }
    }
}

